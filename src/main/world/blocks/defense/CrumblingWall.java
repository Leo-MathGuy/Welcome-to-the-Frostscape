package main.world.blocks.defense;

import arc.struct.Seq;
import main.world.BaseBlock;
import main.world.BaseBuilding;
import main.world.UpgradesBlock;
import main.world.UpgradesType;
import main.world.blocks.drawers.UpgradeDrawer;
import main.world.systems.upgrades.Upgrade;
import main.world.systems.upgrades.UpgradeEntry;
import mindustry.entities.TargetPriority;
import mindustry.world.meta.BlockGroup;
import mindustry.world.meta.Env;

public class CrumblingWall extends BaseBlock implements UpgradesType {

    //Flat damage reduction.
    public float minReduced = 0.02f;
    public int plating = 0;

    public CrumblingWall(String name){
        super(name);
        solid = true;
        destructible = true;
        group = BlockGroup.walls;
        update = false;
        canOverdrive = false;
        drawDisabled = false;
        crushDamageMultiplier = 5f;
        priority = TargetPriority.wall;
        envEnabled = Env.any;
    }

    //One day im going to learn Annos and all this boilerplate (might) disipear!
    //Aplicable upgrades, autogenerated
    public final Seq<Upgrade> upgrades = new Seq<>();

    public Seq<UpgradeEntry> entries = new Seq<>();

    @Override
    public Seq<UpgradeEntry> entries() {
        return entries;
    }

    @Override
    public void load() {
        super.load();
        entries.each(entry -> {
            entry.initialiseDeltas();
            upgrades.add(entry.upgrade);
        });
    }

    @Override
    public Seq<UpgradeDrawer> drawers() {
        return null;
    }

    public class CrumblingWallBuild extends BaseBuilding {

        @Override
        public UpgradesType type() {
            return (UpgradesBlock) block;
        }
    }
}
